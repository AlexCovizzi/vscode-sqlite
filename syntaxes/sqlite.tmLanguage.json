{
    "scopeName": "source.sql.sqlite",
    "patterns": [{
        "include": "#cli-instruction"
    }, {
        "include": "#comment"
    }, {
        "include": "#sql-stmt-explain"
    }, {
        "include": "#sql-stmt"
    }, {
        "include": "#other-stmt"
    }],
    "repository": {
        "sql-stmt-explain": {
            "begin": "(?i)\\b(explain)(?:\\s+(query\\s+plan))?\\b\\s*",
            "end": "(?=;)",
            "name": "meta.statement.explain",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.sql.sqlite"
                },
                "2": {
                    "name": "keyword.other.sql.sqlite"
                }
            },
            "patterns": [{
                "include": "#sql-stmt"
            }]
        },
        "sql-stmt": {
            "patterns": [{
                "include": "#sql-stmt-with"
            }, {
                "include": "#select-stmt"
            }]
        },
        "select-stmt": {
            "patterns": [{
                "include": "#select-stmt-select"
            }, {
                "include": "#select-stmt-values"
            }]
        },
        "select-stmt-subquery": {
            "patterns": [{
                "include": "#select-stmt-with-subquery"
            }, {
                "include": "#select-stmt-select-subquery"
            }, {
                "include": "#select-stmt-values-subquery"
            }]
        },
        "sql-stmt-with": {
            "begin": "(?i)\\b(with)(\\s+recursive)?\\b\\s*",
            "end": "(?=;)",
            "name": "meta.statement.with.sql.sqlite",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.DML.sql.sqlite"
                },
                "2": {
                    "name": "keyword.other.DML.sql.sqlite"
                }
            },
            "patterns": [{
                "include": "#common-table-expression"
            }, {
                "include": "#select-stmt"
            }]
        },
        "select-stmt-with-subquery": {
            "begin": "(?i)\\b(with)(\\s+recursive)?\\b\\s*",
            "end": "(?=\\))",
            "name": "meta.statement.with.sql.sqlite",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.DML.sql.sqlite"
                },
                "2": {
                    "name": "keyword.other.DML.sql.sqlite"
                }
            },
            "patterns": [{
                "include": "#select-stmt-subquery"
            }, {
                "include": "#common-table-expression"
            }]
        },
        "with-clause-as": {
            "begin": "(?i)\\b(as)\\b\\s*",
            "end": "(?<=\\))",
            "name": "meta.other.cte-as.sql.sqlite",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.sql.sqlite"
                }
            },
            "endCaptures": {},
            "patterns": [{
                "begin": "\\(",
                "end": "\\)",
                "name": "meta.cte-select-stmt.sql.sqlite",
                "beginCaptures": {},
                "endCaptures": {},
                "patterns": [{
                    "include": "#select-stmt-subquery"
                }]
            }]
        },
        "common-table-expression": {
            "patterns": [{
                "include": "#with-clause-as"
            }, {
                "include": "#name"
            }, {
                "begin": "\\(",
                "end": "\\)",
                "beginCaptures": {},
                "endCaptures": {},
                "patterns": [{
                    "include": "#name"
                }]
            }]
        },
        "select-stmt-select": {
            "begin": "(?i)\\b(select)\\b\\s*",
            "end": "(?=;)",
            "name": "meta.statement.select.sql.sqlite",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.DML.sql.sqlite"
                }
            },
            "patterns": [{
                "include": "#expr"
            }]
        },
        "select-stmt-select-subquery": {
            "begin": "(?i)\\b(select)\\b\\s*",
            "end": "(?=\\))",
            "name": "meta.statement.select.subquery.sql.sqlite",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.DML.sql.sqlite"
                }
            },
            "patterns": [{
                "include": "#expr"
            }]
        },
        "select-stmt-values": {
            "begin": "(?i)\\b(values)\\s*",
            "end": "(?=;)",
            "name": "meta.statement.values.sql.sqlite",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.DML.sql.sqlite"
                }
            },
            "patterns": [{
                "include": "#rowvalue"
            }]
        },
        "select-stmt-values-subquery": {
            "begin": "(?i)\\b(values)\\s*",
            "end": "(?=\\))",
            "name": "meta.statement.values.subquery.sql.sqlite",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.DML.sql.sqlite"
                }
            },
            "patterns": [{
                "include": "#rowvalue"
            }]
        },
        "rowvalue": {
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.rowvalue.values.begin"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.rowvalue.values.end"
                }
            },
            "name": "meta.rowvalue.sql.sqlite",
            "patterns": [{
                "include": "#expr"
            }, {
                "match": ",",
                "name": "punctuation.separator.rowvalue"
            }]
        },
        "expr": {
            "patterns": [{
                "include": "#comment"
            }, {
                "include": "#keyword"
            }, {
                "include": "#expr-parens"
            }, {
                "include": "#function"
            }, {
                "include": "#literal-value"
            }, {
                "include": "#name"
            }]
        },
        "expr-parens": {
            "begin": "\\(",
            "end": "\\)",
            "name": "meta.parens",
            "patterns": [{
                "include": "#select-stmt-subquery"
            }, {
                "include": "#keyword"
            }, {
                "include": "#expr-parens"
            }, {
                "include": "#function"
            }, {
                "include": "#literal-value"
            }, {
                "include": "#name"
            }]
        },
        "literal-value": {
            "patterns": [{
                "match": "(?i)\\b(null|true|false|current_time|current_date|current_timestamp)\\b",
                "name": "constant.language.sql.sqlite"
            }, {
                "include": "#numeric-literal"
            }, {
                "include": "#blob-literal"
            }, {
                "include": "#string-literal"
            }]
        },
        "function": {
            "begin": "\\b([A-Za-z]\\w+)\\b\\s*(\\()",
            "end": "\\)",
            "name": "meta.function-call.sql.sqlite",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.function.sql.sqlite"
                }
            },
            "patterns": [{
                "include": "#expr"
            }]
        },
        "keyword": {
            "match": "(?i)\\b(abort|action|add|after|all|alter|always|analyze|and|as|asc|attach|autoincrement|before|begin|between|by|cascade|case|cast|check|collate|column|commit|conflict|constraint|create|cross|current|current_date|current_time|current_timestamp|database|default|deferrable|deferred|delete|desc|detach|distinct|do|drop|each|else|end|escape|except|exclude|exclusive|exists|explain|fail|filter|first|following|for|foreign|from|full|generated|glob|group|groups|having|if|ignore|immediate|in|index|indexed|initially|inner|insert|instead|intersect|into|is|isnull|join|key|last|left|like|limit|match|materialized|natural|no|not|nothing|notnull|null|nulls|of|offset|on|or|order|others|outer|over|partition|plan|pragma|preceding|primary|query|raise|range|recursive|references|regexp|reindex|release|rename|replace|restrict|returning|right|rollback|row|rows|savepoint|select|set|table|temp|temporary|then|ties|to|transaction|trigger|unbounded|union|unique|update|using|vacuum|values|view|virtual|when|where|window|with|without)\\b",
            "name": "keyword.other.sql.sqlite"
        },
        "name": {
            "patterns": [{
                "include": "#doublequoted-name"
            }, {
                "include": "#backquoted-name"
            }, {
                "include": "#bare-name"
            }]
        },
        "bare-name": {
            "match": "\\b(?i)(?!abort\\b|action\\b|add\\b|after\\b|all\\b|alter\\b|analyze\\b|and\\b|as\\b|asc\\b|attach\\b|autoincrement\\b|before\\b|begin\\b|between\\b|by\\b|cascade\\b|case\\b|cast\\b|check\\b|collate\\b|column\\b|commit\\b|conflict\\b|constraint\\b|create\\b|cross\\b|current\\b|current_date\\b|current_time\\b|current_timestamp\\b|database\\b|default\\b|deferrable\\b|deferred\\b|delete\\b|desc\\b|detach\\b|distinct\\b|do\\b|drop\\b|each\\b|else\\b|end\\b|escape\\b|except\\b|exclusive\\b|exists\\b|explain\\b|fail\\b|filter\\b|following\\b|for\\b|foreign\\b|from\\b|full\\b|glob\\b|group\\b|having\\b|if\\b|ignore\\b|immediate\\b|in\\b|index\\b|indexed\\b|initially\\b|inner\\b|insert\\b|instead\\b|intersect\\b|into\\b|is\\b|isnull\\b|join\\b|key\\b|left\\b|like\\b|limit\\b|match\\b|natural\\b|no\\b|not\\b|nothing\\b|notnull\\b|null\\b|of\\b|offset\\b|on\\b|or\\b|order\\b|outer\\b|over\\b|partition\\b|plan\\b|pragma\\b|preceding\\b|primary\\b|query\\b|raise\\b|range\\b|recursive\\b|references\\b|regexp\\b|reindex\\b|release\\b|rename\\b|replace\\b|restrict\\b|right\\b|rollback\\b|row\\b|rows\\b|savepoint\\b|select\\b|set\\b|table\\b|temp\\b|temporary\\b|then\\b|to\\b|transaction\\b|trigger\\b|unbounded\\b|union\\b|unique\\b|update\\b|using\\b|vacuum\\b|values\\b|view\\b|virtual\\b|when\\b|where\\b|window\\b|with\\b|without)\\w+\\b",
            "name": "variable.other.bare"
        },
        "doublequoted-name": {
            "begin": "\"",
            "end": "\"(?!\")",
            "name": "variable.other.quoted.double",
            "patterns": [{
                "match": "\"\"",
                "name": "constant.character.escape.doublequote.sql.sqlite"
            }]
        },
        "backquoted-name": {
            "begin": "`",
            "end": "`(?!`)",
            "name": "variable.other.quoted.other",
            "patterns": [{
                "match": "``",
                "name": "constant.character.escape.backquote.sql.sqlite"
            }]
        },
        "bracketed-name": {
            "begin": "[",
            "end": "]",
            "name": "variable.other.bracketed"
        },
        "numeric-literal": {
            "match": "(?i)(?<![\\w\\.])((\\d+(\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?|0x[\\da-f]+)\\b",
            "name": "constant.numeric.sql.sqlite"
        },
        "string-literal": {
            "begin": "'",
            "end": "'(?!')",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.sql.sqlite"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.sql.sqlite"
                }
            },
            "name": "string.quoted.single.sql.sqlite",
            "patterns": [{
                "match": "''",
                "name": "constant.character.escape.singlequote.sql.sqlite"
            }]
        },
        "blob-literal": {
            "begin": "\\b(?i)x'",
            "end": "'",
            "name": "string.quoted.other.blob.sql.sqlite"
        },
        "cli-instruction": {
            "match": "^\\.(?:(auth|backup|bail|binary|cd|changes|check|clone|databases|dbconfig|dbinfo|dump|echo|eqp|excel|exit|expert|fullschema|headers|help|import|imposter|indexes|limit|lint|load|log|mode|nullvalue|once|open|output|print|prompt|quit|read|restore|save|scanstats|schema|selftest|separator|sha3sum|shell|show|stats|system|tables|testcase|timeout|timer|trace|vfsinfo|vfslist|vfsname|width)|\\w+)\\b.*$",
            "captures": {
                "1": {
                    "name": "keyword.other.cli-instruction.sql.sqlite"
                }
            }
        },
        "comment": {
            "patterns": [{
                "match": "--.*",
                "name": "comment.line.double-dash.sql.sqlite"
            }, {
                "begin": "/\\*",
                "end": "\\*/",
                "name": "comment.block.sql.sqlite"
            }]
        },
        "other-stmt": {
            "begin": "(?i)\\b(alter|analyze|attach|begin|commit|create|delete|detach|drop|end|insert|pragma|reindex|release|replace|rollback|savepoint|update|vacuum)\\b\\s*",
            "end": "(?=;)",
            "name": "meta.statement.with.sql.sqlite",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.sql.sqlite"
                }
            },
            "patterns": [{
                "include": "#expr"
            }]
        }
    }
}
